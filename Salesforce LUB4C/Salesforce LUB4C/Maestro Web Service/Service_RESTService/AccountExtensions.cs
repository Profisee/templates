//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Maestro SDK Web Services Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.ServiceModel.Web;
using Mdm.Profisee_Customer360Service.Contracts;
using Mdm.Profisee_Customer360Service.Contracts.MemberDataContracts;
using Profisee.MasterDataMaestro.Services.DataContracts;
using Profisee.MasterDataMaestro.Services.DataContracts.MasterDataServices;
using MdmAttribute = Profisee.MasterDataMaestro.Services.DataContracts.MasterDataServices.Attribute;

namespace Mdm.Profisee_Customer360Service.ServiceREST
{
	using Profisee.Services.Sdk.AcceleratorFramework;
	using Profisee.Services.Sdk.Common;
	using System.Diagnostics;


    /// <remarks>
    /// This class provides the implementation of service contract associated with the MDS model.  Note that this
    /// class is defined as 'partial'. Custom operations should be defined in the <see cref="IAccount"/>
    /// class file located in this same directory.
    ///  
    /// This file is generated initially but it is generated only once. The Service Builder will not overwrite this
    /// file if it exists because it is intended to house any custom operations that you may need to add to
    /// the service contract. If you remove or rename this class before running the Service Builder it will generate
    /// an updated class definition. You may then reapply any custom service operations from your prior version.
    /// </remarks>
    public partial class Account : IAccount
    {
		#region -- PROPERTIES RELATING TO THE INFORMATION FROM THE WEB.CONFIG FILE --

		private string MaestroAttributeName { get { return ConfigurationManager.AppSettings["MaestroAttribute.Name"]; } }
		private string MaestroAttributeBillingAddress { get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingAddress"]; } }
		private string MaestroAttributeBillingCity { get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingCity"]; } }
		private string MaestroAttributeBillingState { get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingState"]; } }
		private string MaestroAttributeBillingPostalCode { get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingPostalCode"]; } }
		private string MaestroAttributeBillingCountry { get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingCountry"]; } }
		private string MaestroAttributePhone { get { return ConfigurationManager.AppSettings["MaestroAttribute.Phone"]; } }
		private string MaestroAttributeFax { get { return ConfigurationManager.AppSettings["MaestroAttribute.Fax"]; } }
		private string MaestroAttributeWebsite { get { return ConfigurationManager.AppSettings["MaestroAttribute.Website"]; } }

		private string MaestroMatchingStrategy { get { return ConfigurationManager.AppSettings["Maestro.MatchingStrategy"]; } }
		private string SalesforceBaseUrl { get { return ConfigurationManager.AppSettings["Salesforce.BaseUrl"]; } }

		#endregion

		// TODO: Add any custom service operation you need here. Here's a sample!
		public String HelloWorld(String name)
        {
            return String.Format("Hello {0}, you\'ve reached the {1} RESTful service.", name, "Account");
        }

		#region -- CODE RELATING TO THE LOOKUP BEFORE CREATE FUNCTIONALITY --
		public AccountLUB4CResponse LookupBeforeCreate(AccountLUB4CRequest request)
		{
			if (WebOperationContext.Current.IncomingRequest.Method == "OPTIONS")
			{
				AllowAccess();
				return null;
			}
			if (request == null)
			{
				AllowAccess();
				return null;
			}
			AllowOrigin();

			var serviceResponse = new AccountLUB4CResponse
			{
				Success = false,
				ErrorMessage = string.Empty,
				Matches = new List<AccountMember>()
			};

			var fieldMapping = new Dictionary<string, string>
			{
				{ "account-Name", MaestroAttributeName },
				{ "account-PhoneNumber", MaestroAttributePhone },
				{ "account-Fax", MaestroAttributeFax },
				{ "account-WebSite", MaestroAttributeWebsite },
				{ "account-AddressLine1", MaestroAttributeBillingAddress },
				{ "account-City", MaestroAttributeBillingCity },
				{ "account-StateProvince", MaestroAttributeBillingState },
				{ "account-PostalCode", MaestroAttributeBillingPostalCode }
			};

			try
			{
				// setup the call to the web service to perform the matching lookup
				var service = new ServiceLibrary.LookupBeforeCreate();
				var stratId = new MaestroIdentifier { Name = MaestroMatchingStrategy };
				var member = new Member { MemberId = new MemberIdentifier(), Attributes = new Collection<MdmAttribute>() };
				foreach (var pair in request.AttributeValues.Where(av => av.Key.StartsWith("account")))
				{
					var fieldName = pair.Key;
					var attrValue = pair.Value;
					var attrMap = fieldMapping.FirstOrDefault(fm => fm.Key.Equals(fieldName));
					if (!attrMap.Equals(default(KeyValuePair<string, string>)))
						member.Attributes.Add(new MdmAttribute { Identifier = new Identifier { Name = attrMap.Value }, Value = attrValue });
				}

				// call the web service to perform the matching lookup
				var response = service.GetMemberMatches(stratId, new Collection<Member> { member }, false, true);
				if (response.OperationResult.Errors.Count > 0)
					throw new Exception(response.OperationResult.Errors[0].Description);

				// process the list of matched members that were returned by the web service
				if (response.Members.Count > 0)
				{
					var memberCodes = response.Members[0].MatchedMembers.Take(20).Select(m => new MemberIdentifier { Code = m.Code }).ToList();
					var members = service.GetAccountMembersUsingIds(this.VersionName, new Collection<MemberIdentifier>(memberCodes));
					foreach (var mem in members)
					{
						var matchedMem = response.Members[0].MatchedMembers.First(mm => mm.Code.Equals(mem.Code, StringComparison.InvariantCultureIgnoreCase));
						mem.MatchScore = matchedMem.Score;
					}

					serviceResponse.Matches = new List<AccountMember>(members.OrderByDescending(m => m.MatchScore).ToList());
				}
				serviceResponse.Success = true;
			}
			catch (Exception e)
			{
				Profisee.Services.Sdk.Common.Logging.LogException(e, System.Diagnostics.EventLogEntryType.Error);
				serviceResponse.Success = false;
				serviceResponse.ErrorMessage = string.Format("There was an error processing the Acccount Lookup Before Create Request ({0})", e.Message);
			}

			return serviceResponse;
		}

		private void AllowAccess()
		{
			AllowOrigin();

			WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowMethods, "GET");
			WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowMethods, "POST");
			WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowHeaders, "Content-Type, Accept");
		}

		private void AllowOrigin()
		{
			WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowOrigin, SalesforceBaseUrl);
		}

		#endregion
	}
}

