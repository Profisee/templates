//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Maestro SDK Web Services Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Mdm.Profisee_Customer360Service.Contracts.MemberDataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Profisee.MasterDataMaestro.Services.DataContracts.MasterDataServices;
using System;
using System.Configuration;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Web.Script.Serialization;

namespace Mdm.Profisee_Customer360Service.RESTfulUnitTest
{
    [TestClass]
    public class AccountRESTfulTests
    {
		private string DefaultCode { get { return ConfigurationManager.AppSettings["DefaultCode"]; } }


		[TestInitialize]
        public void TestInitialize()
        {
        }


        private T Get<T>(WebRequest webRequest)
        {
            DataContractSerializer dataContractSerializer = new DataContractSerializer(typeof(T));
            webRequest.Credentials = CredentialCache.DefaultCredentials;

            var httpWebResponse = webRequest.GetResponse() as HttpWebResponse;
            Assert.AreEqual(HttpStatusCode.OK, httpWebResponse.StatusCode);

            if (httpWebResponse.ContentLength > 0)
                using (Stream stream = httpWebResponse.GetResponseStream())
                    return (T)dataContractSerializer.ReadObject(stream);

            return default(T);
        }

        private void Put<T>(WebRequest webRequest, T obj)
        {
            DataContractSerializer dataContractSerializer = new DataContractSerializer(typeof(T));
            webRequest.Credentials = CredentialCache.DefaultCredentials;

            using (Stream stream = webRequest.GetRequestStream())
            {
                dataContractSerializer.WriteObject(stream, obj);
            }
        }


		//The following TestMethod will be skipped in Test Explorer. Before establishing a UnitTest, please remove: Ignore.
        [TestMethod]
        public void RESTful_GetAccountMember()
        {
			//This is a Generated Sample Test Case for the Master Data Services Example Account Model. 
			//For further information on how to create a TestMethod please visit: https://msdn.microsoft.com/en-us/library/ms182517%28v=vs.100%29.aspx

            var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account/GetAccountMember/"+ DefaultCode);
            webRequest.Method = "GET";

            AccountMember member = Get<AccountMember>(webRequest);

            Assert.IsNotNull(member);

            //Assert.AreEqual("Adjustable Ring", member.Name);
            //Assert.AreEqual((DefaultCode, member.Code);
        }

		[TestMethod]
		public void RESTful_LookupBeforeCreate()
		{
			var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account.svc/LookupBeforeCreate");
			webRequest.Credentials = CredentialCache.DefaultCredentials;
			webRequest.Method = "POST";
			webRequest.ContentType = "application/json";

			//string data = "{\"AttributeValues\":[{\"account-Name\":\"First Financial\",\"account-BillingStreet\":\"255 East Fifth Street\",\"account-BillingZipPostalCode\":\"45202\"}]}";
			//using (var writer = new StreamWriter(webRequest.GetRequestStream()))
			//{
			//	writer.Write(data);
			//	writer.Flush();
			//	writer.Close();
			//}
			var lub4cRequest = new Mdm.Profisee_Customer360Service.Contracts.AccountLUB4CRequest();
			lub4cRequest.AttributeValues = new Dictionary<string, string>
			{
				{"account-Name", "First Financial"},
				{"account-BillingStreet", "255 East Fifth Street"},
				{"account-BillingZipPostalCode", "45202"},
				{"account-PhoneNumber", "(877) 322-9530" },
				{"account-WebSite", "https://www.bankatfirst.com/content/first-financial-bank/home.html" }
			};
			var jsonSerializer = new JavaScriptSerializer();
			var serialized = jsonSerializer.Serialize(lub4cRequest);
			webRequest.ContentLength = serialized.Length;
			using (var writer = new StreamWriter(webRequest.GetRequestStream(), System.Text.Encoding.ASCII))
			{
				writer.Write(serialized);
				writer.Flush();
				writer.Close();
			}
			var response = webRequest.GetResponse();
			using (var sr = new StreamReader(response.GetResponseStream()))
			{
				var responseText = sr.ReadToEnd();
			}
		}


		//The following TestMethod will be skipped in Test Explorer. Before establishing a UnitTest, please remove: Ignore.
		[TestMethod,Ignore]
        public void RESTful_GetAccountMembers()
        {
			//This is a Generated Sample Test Case for the Master Data Services Example Account Model. 
			//For further information on how to create a TestMethod please visit: https://msdn.microsoft.com/en-us/library/ms182517%28v=vs.100%29.aspx

            var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account/GetAccountMembers");
            webRequest.Method = "GET";

            AccountMemberList members = Get<AccountMemberList>(webRequest);

            Assert.IsNotNull(members);
            Assert.AreEqual(50, members.Count);
        }

		//The following TestMethod will be skipped in Test Explorer. Before establishing a UnitTest, please remove: Ignore.
        [TestMethod,Ignore]
        public void RESTful_GetAccountMembers_Filter()
        {
			//This is a Generated Sample Test Case for the Master Data Services Example Account Model. 
			//For further information on how to create a TestMethod please visit: https://msdn.microsoft.com/en-us/library/ms182517%28v=vs.100%29.aspx

            var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account/GetAccountMembers/filter=[Code] LIKE '%25AR%25'");
            webRequest.Method = "GET";

            AccountMemberList members = Get<AccountMemberList>(webRequest);

            Assert.IsNotNull(members);
            //Assert.AreEqual(50, members.Count);
        }

		//The following TestMethod will be skipped in Test Explorer. Before establishing a UnitTest, please remove: Ignore.
        [TestMethod,Ignore]
        public void RESTful_GetAccountMembers_PageNumberPageSize()
        {
			//This is a Generated Sample Test Case for the Master Data Services Example Account Model. 
			//For further information on how to create a TestMethod please visit: https://msdn.microsoft.com/en-us/library/ms182517%28v=vs.100%29.aspx

            var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account/GetAccountMembers/pagenumber=1;pagesize=50");
            webRequest.Method = "GET";

            AccountMemberList members = Get<AccountMemberList>(webRequest);

            Assert.IsNotNull(members);
            Assert.AreEqual(50, members.Count);
        }

		//The following TestMethod will be skipped in Test Explorer. Before establishing a UnitTest, please remove: Ignore.
        [TestMethod,Ignore]
        public void RESTful_GetAccountMembers_FilterPageNumberPageSize()
        {
			//This is a Generated Sample Test Case for the Master Data Services Example Account Model. 
			//For further information on how to create a TestMethod please visit: https://msdn.microsoft.com/en-us/library/ms182517%28v=vs.100%29.aspx

            var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account/GetAccountMembers/filter=[Code] LIKE '%25AR%25';pagenumber=1;pagesize=50");
            webRequest.Method = "GET";

            AccountMemberList members = Get<AccountMemberList>(webRequest);

            Assert.IsNotNull(members);
            //Assert.AreEqual(50, members.Count);
        }

		//The following TestMethod will be skipped in Test Explorer. Before establishing a UnitTest, please remove: Ignore.
        [TestMethod,Ignore]
        public void RESTful_AddAccountMember()
        {
			//This is a Generated Sample Test Case for the Master Data Services Example Account Model. 
			//For further information on how to create a TestMethod please visit: https://msdn.microsoft.com/en-us/library/ms182517%28v=vs.100%29.aspx

            var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account/AddAccountMember");
            webRequest.Method = "POST";
            webRequest.ContentType = "application/xml";

            AccountMember member = new AccountMember();
            member.MemberId = new MemberIdentifier { Name = "Test", Code = Guid.NewGuid().ToString() };
            Put<AccountMember>(webRequest, member);
            MemberIdentifier memberIdentifier = Get<MemberIdentifier>(webRequest);

			Assert.IsNotNull(memberIdentifier);
            Assert.AreEqual(member.MemberId.Code, memberIdentifier.Code);
        }

		//The following TestMethod will be skipped in Test Explorer. Before establishing a UnitTest, please remove: Ignore.
        [TestMethod,Ignore]
        public void RESTful_AddAccountMembers()
        {
			//This is a Generated Sample Test Case for the Master Data Services Example Account Model. 
			//For further information on how to create a TestMethod please visit: https://msdn.microsoft.com/en-us/library/ms182517%28v=vs.100%29.aspx

            var webRequest = WebRequest.Create(ConfigurationManager.AppSettings["RESTfulUri"] + "Account/AddAccountMembers");
            webRequest.Method = "POST";
            webRequest.ContentType = "application/xml";

			Collection<AccountMember> members = new Collection<AccountMember>();
            int count = 10;
			for(int i = 0; i < count; i++)
			{
				AccountMember member = new AccountMember();
				member.MemberId = new MemberIdentifier { Name = "Test" + i, Code = Guid.NewGuid().ToString() };
				members.Add(member);
			}
			
            Put<Collection<AccountMember>>(webRequest, members);
			var httpWebResponse = webRequest.GetResponse() as HttpWebResponse;
            Assert.AreEqual(HttpStatusCode.OK, httpWebResponse.StatusCode);

			Collection<MemberIdentifier> memberIdentifiers = Get<Collection<MemberIdentifier>>(webRequest);

            Assert.IsNotNull(memberIdentifiers);
            Assert.IsTrue(memberIdentifiers.Count == count, "The Member Identifiers returned did not matcht the members" 
                + "added to the AddMembers operation");
        }






    }
}

