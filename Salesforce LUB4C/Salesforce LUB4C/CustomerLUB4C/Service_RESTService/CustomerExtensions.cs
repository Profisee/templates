using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.ServiceModel.Web;
using Mdm.Profisee_Customer360Service.Contracts;
using Mdm.Profisee_Customer360Service.Contracts.MemberDataContracts;
using Profisee.MasterDataMaestro.Services.DataContracts;
using Profisee.MasterDataMaestro.Services.DataContracts.MasterDataServices;
using Profisee.MasterDataMaestro.Services.MessageContracts;
using Profisee.Services.Sdk.AcceleratorFramework;
using Profisee.Services.Sdk.Common.Contracts.DataContext;
using MdmAttribute = Profisee.MasterDataMaestro.Services.DataContracts.MasterDataServices.Attribute;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Maestro SDK Web Services Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mdm.Profisee_Customer360Service.ServiceREST
{


    /// <remarks>
    /// This class provides the implementation of service contract associated with the MDS model.  Note that this
    /// class is defined as 'partial'. Custom operations should be defined in the <see cref="ICustomer"/>
    /// class file located in this same directory.
    ///  
    /// This file is generated initially but it is generated only once. The Service Builder will not overwrite this
    /// file if it exists because it is intended to house any custom operations that you may need to add to
    /// the service contract. If you remove or rename this class before running the Service Builder it will generate
    /// an updated class definition. You may then reapply any custom service operations from your prior version.
    /// </remarks>
    public partial class Customer : ICustomer
    {
        // TODO: Add any custom service operation you need here. Here's a sample!
        [SwaggerWcf.Attributes.SwaggerWcfTag("Customer Member")]
        public String HelloWorld(String name)
        {
            return String.Format("Hello {0}, you\'ve reached the {1} RESTful service.", name, "Customer");
        }

        // TODO: Add any custom service operation you need here. Here's a sample!
        [SwaggerWcf.Attributes.SwaggerWcfTag("Customer lookup before create")]
        public LookupResponse Lookup(LookUpRequest request)
        {
            var response = new LookupResponse
            {
                Errors = new List<Error>(),
                Messages = new List<string>(),
                MatchedMembers = new List<MatchMember>()
            };

            try
            {
                // connect to Maestro and get the necessary data structures
                var maestroUri = ConfigurationManager.AppSettings.Get("MaestroUri");
                var source = new MdmSource();
                source.Connect(maestroUri);
                var model = source.GetModel();
                var entity = model.GetEntity(request.Entity);
                var matchingStrategy = model.GetMatchingStrategy(request.MatchingStrategy);

                // validate the matching strategy
                if (matchingStrategy.EntityId.Name != request.Entity)
                {
                    response.Errors.Add(new Error
                    {
                        Code = "LUB4C.InvalidEntity",
                        Description =
                            $"Matching Strategy Entity ({matchingStrategy.EntityId.Name}) does not match Request Entity ({request.Entity})",
                        ErrorType = ErrorType.Error
                    });

                    //if (matchingStrategy.VersionId.Name != request.DataContext.Version)
                    //	response.Errors.Add(new Error { Code = "LUB4C.InvalidVersion", Description = $"Matching Strategy Version ({matchingStrategy.VersionId.Name}) does not match Request Version ({request.DataContext.Version})", ErrorType = ErrorType.Error });
                    //if (response.Errors.Count > 0)

                    return response;
                }

                // make sure all attributes in the matching strategy have values
                var missingAttributes = FindMissingMatchAttributes(request.MatchAttributes, matchingStrategy);
                if (missingAttributes.Count > 0)
                    response.Messages.Add(
                        $"The following Attributes were not received: {string.Join(", ", missingAttributes)}");
                foreach (var missingAttr in missingAttributes)
                    request.MatchAttributes.Add(new MatchAttribute {Name = missingAttr, Value = string.Empty});


                //request.MatchAttributes.Add(new MatchAttribute { Name = "Region", Value = string.Empty });

                // create the member based on the data received in the request
                var member = new Member
                {
                    MemberId = new MemberIdentifier(),
                    Attributes = new Collection<MdmAttribute>()
                };

                foreach (var matchAttribute in request.MatchAttributes)
                    member.Attributes.Add(
                        new MdmAttribute
                        {
                            Identifier = new Identifier {Name = matchAttribute.Name},
                            Value = matchAttribute.Value
                        });

                // perform the fuzzy matching and get the results
                var matchRequest = new GetMemberMatchesRequest
                {
                    StrategyId = matchingStrategy.Identifier,
                    IncludeMatchesInMemberGroups = false,
                    IsLookupBeforeCreate = true,
                    Members = new List<Member> {member},
                };
                var matchResults = model.GetMemberMatches(matchRequest);

                // add errors from the matching operation to the error collection
                foreach (var operationError in matchResults.OperationResult.Errors)
                    response.Errors.Add(operationError);

                // add any matched results to the process
                if (matchResults.Members.Count > 0)
                {
                    response.Messages.Add(
                        $"There were {matchResults.Members[0].MatchedMembers.Count} matched members found.");
                    var memberCodes = matchResults.Members[0].MatchedMembers.Take(20).Select(m => m.Code).ToList();

                    var filter = string.Empty;
                    foreach (var code in memberCodes)
                    {
                        if (string.IsNullOrEmpty(code))
                            continue;
                        filter = string.IsNullOrEmpty(filter) ? $"[Code]='{code}'" : $"{filter} OR [Code]='{code}'";
                    }


                    //string filter = $"[Code] in ('{string.Join("', '", memberCodes)}')";
                    response.Messages.Add($"Filter: [{filter}]");
                    var bec = new BrowseEntityContext
                    {
                        Filter = filter
                    };

                    //bec.Filter = $"[Code]='168'";
                    //var matchedMembers = entity.GetMembers(request.Version, bec, request.ReturnAttributes, false);
                    var matchedMembers = entity.GetMemberCollection(request.Version, bec, request.ReturnAttributes);
                    response.Messages.Add($"matchedMembers.Count: {matchedMembers.Count}");



                    foreach (var mem in matchedMembers)
                    {
                        var resultMember = matchResults.Members[0].MatchedMembers.FirstOrDefault(mm =>
                            mm.Code.Equals(mem.MemberId.Code, StringComparison.InvariantCultureIgnoreCase));

                        var responseMember = new MatchMember
                            {MatchScore = resultMember.Score, Attributes = new Collection<MemberAttribute>()};
                        foreach (var attrName in request.ReturnAttributes)
                        {
                            var attr = mem.Attributes.FirstOrDefault(a => a.Name.Equals(attrName));
                            if (attr == null)
                                responseMember.Attributes.Add(new MemberAttribute {Name = attrName, Value = null});
                            else
                                responseMember.Attributes.Add(new MemberAttribute
                                    {Name = attrName, Value = attr.Value});
                        }

                        response.MatchedMembers.Add(responseMember);
                    }

                }
            }
            catch (Exception ex)
            {
                response.Errors.Add(new Error
                    {Code = "LUB4C.Error", Description = ex.ToString(), ErrorType = ErrorType.Error});
            }

            return response;
        }

        private List<string> FindMissingMatchAttributes(Collection<MdmAttribute> matchAttributes,
            MatchingStrategy strategy)
        {
            var missingAttributes = new List<string>();

            foreach (var attributeSet in strategy.ColumnSets)
            {
                foreach (var attr in attributeSet.Columns)
                {
                    var matchAttribute = matchAttributes.FirstOrDefault(m => m.Name.Equals(attr.AttributeId.Name));
                    if (matchAttribute == null)
                        missingAttributes.Add(attr.AttributeId.Name);
                }
            }

            return missingAttributes;
        }
        private List<string> FindMissingMatchAttributes(Collection<MatchAttribute> matchAttributes,
            MatchingStrategy strategy)
        {
            var missingAttributes = new List<string>();

            foreach (var attributeSet in strategy.ColumnSets)
            {
                foreach (var attr in attributeSet.Columns)
                {
                    var matchAttribute = matchAttributes.FirstOrDefault(m => m.Name.Equals(attr.AttributeId.Name));
                    if (matchAttribute == null)
                        missingAttributes.Add(attr.AttributeId.Name);
                }
            }

            return missingAttributes;
        }


        #region -- PROPERTIES RELATING TO THE INFORMATION FROM THE WEB.CONFIG FILE --

        private string MaestroAttributeName
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.Name"]; }
        }

        private string MaestroAttributeBillingAddress
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingAddress"]; }
        }

        private string MaestroAttributeBillingCity
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingCity"]; }
        }

        private string MaestroAttributeBillingState
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingState"]; }
        }

        private string MaestroAttributeEmail
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.Email"]; }
        }

        private string MaestroAttributeBillingPostalCode
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingPostalCode"]; }
        }

        private string MaestroAttributeBillingCountry
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.BillingCountry"]; }
        }

        private string MaestroAttributePhone
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.Phone"]; }
        }

        private string MaestroAttributeFax
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.Fax"]; }
        }

        private string MaestroAttributeWebsite
        {
            get { return ConfigurationManager.AppSettings["MaestroAttribute.Website"]; }
        }

        private string MaestroMatchingStrategy
        {
            get { return ConfigurationManager.AppSettings["Maestro.MatchingStrategy"]; }
        }

        private string SalesforceBaseUrl
        {
            get { return ConfigurationManager.AppSettings["Salesforce.BaseUrl"]; }
        }

        #endregion



        #region -- CODE RELATING TO THE LOOKUP BEFORE CREATE FUNCTIONALITY --

        public Contracts.LookupResponse LookupBeforeCreate(LookupRequest request)
        {
            //if (WebOperationContext.Current.IncomingRequest.Method == "OPTIONS")
            //{
            //    AllowAccess();
            //    return null;
            //}

            //if (request == null)
            //{
            //    AllowAccess();
            //    return null;
            //}

            //AllowOrigin();

            var serviceResponse = new Contracts.LookupResponse
            {
                Success = false,
                ErrorMessage = string.Empty,
                Matches = new List<CustomerMember>()
            };

            var fieldMapping = new Dictionary<string, string>
            {
                {"account-Name", MaestroAttributeName},
                {"account-PhoneNumber", MaestroAttributePhone},
                //{"account-Fax", MaestroAttributeFax},
                //{"account-WebSite", MaestroAttributeWebsite},
                {"account-AddressLine1", MaestroAttributeBillingAddress},
                {"account-City", MaestroAttributeBillingCity},
                {"account-StateProvince", MaestroAttributeBillingState},
                {"account-PostalCode", MaestroAttributeBillingPostalCode},
                //{"account-Email", MaestroAttributeEmail}
            };

            try
            {
                // setup the call to the web service to perform the matching lookup
                var service = new ServiceLibrary.LookupBeforeCreate();
                var stratId = new MaestroIdentifier {Name = MaestroMatchingStrategy};
                var member = new Member
                    {MemberId = new MemberIdentifier(), Attributes = new Collection<MdmAttribute>()};
                foreach (var pair in request.AttributeValues.Where(av => av.Key.StartsWith("account")))
                {
                    var fieldName = pair.Key;
                    var attrValue = pair.Value;
                    var attrMap = fieldMapping.FirstOrDefault(fm => fm.Key.Equals(fieldName));
                    if (!attrMap.Equals(default(KeyValuePair<string, string>)))
                        member.Attributes.Add(new MdmAttribute
                            {Identifier = new Identifier {Name = attrMap.Value}, Value = attrValue});
                }

                var maestroUri = ConfigurationManager.AppSettings.Get("MaestroUri");
                var source = new MdmSource();
                source.Connect(maestroUri);
                var model = source.GetModel();
                var matchingStrategy = model.GetMatchingStrategy(stratId);

                var missingAttributes = FindMissingMatchAttributes(member.Attributes, matchingStrategy);

                foreach (var missingAttr in missingAttributes)
                    member.Attributes.Add(new MdmAttribute
                        {Identifier = new Identifier {Name = missingAttr}, Value = string.Empty});

                // create the member based on the data received in the request
                // perform the fuzzy matching and get the results
                var matchRequest = new GetMemberMatchesRequest
                {
                    StrategyId = matchingStrategy.Identifier,
                    IncludeMatchesInMemberGroups = false,
                    IsLookupBeforeCreate = true,
                    Members = new List<Member> { member },
                };
                var response = model.GetMemberMatches(matchRequest);


                // call the web service to perform the matching lookup
                //var response = service.GetMemberMatches(stratId, new Collection<Member> {member}, false, true);
                if (response.OperationResult.Errors.Count > 0)
                    throw new Exception(response.OperationResult.Errors[0].Description);

                // process the list of matched members that were returned by the web service
                if (response.Members.Count > 0)
                {
                    var memberCodes = response.Members[0].MatchedMembers.Take(20)
                        .Select(m => new MemberIdentifier {Code = m.Code}).ToList();
                    var members = service.GetCustomerMembersUsingIds(VersionName, new Collection<MemberIdentifier>(memberCodes));
                    foreach (var mem in members)
                    {
                        var matchedMem = response.Members[0].MatchedMembers.First(mm =>
                            mm.Code.Equals(mem.Code, StringComparison.InvariantCultureIgnoreCase));
                        mem.MatchScore = matchedMem.Score;
                    }

                    serviceResponse.Matches =
                        new List<CustomerMember>(members.OrderByDescending(m => m.MatchScore).ToList());
                }

                serviceResponse.Success = true;
            }
            catch (Exception e)
            {
                Profisee.Services.Sdk.Common.Logging.LogException(e, System.Diagnostics.EventLogEntryType.Error);
                serviceResponse.Success = false;
                serviceResponse.ErrorMessage =
                    string.Format("There was an error processing the Acccount Lookup Before Create Request ({0})",
                        e.Message);
            }

            return serviceResponse;
        }

        private void AllowAccess()
        {
            AllowOrigin();

            WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowMethods, "GET");
            WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowMethods, "POST");
            WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowHeaders,
                "Content-Type, Accept");
        }

        private void AllowOrigin()
        {
            WebOperationContext.Current.OutgoingResponse.Headers.Add(CorsConstants.AccessControlAllowOrigin,
                SalesforceBaseUrl);
        }

        #endregion
    }
}


