//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Profisee SDK Web Services Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mdm.AccountService.ServiceLibrary
{
    using Mdm.AccountService.Contracts;
    using Profisee.Services.Sdk.AcceleratorFramework;
    using System;
    using System.Configuration;
    using System.ServiceModel;
    
    /// <remarks>
    /// This class provides the implementation of the service contract associated with the model.  Note that this
    /// class is defined as 'partial'. The bulk of the implementation is generated and contained in the
    /// entity-specific files within the 'Services' subdirectory.
    ///  
    /// This file should not be edited. If any user-defined customization must be added to this service, these
    /// methods should be added to the AccountExtensions file and its associated <see cref="IAccountExtensions"/> interface.
    /// </remarks>
    [System.ServiceModel.ServiceBehavior(InstanceContextMode=InstanceContextMode.PerSession, ConcurrencyMode=ConcurrencyMode.Multiple)]
    public partial class Account : BaseModelService, IAccount
    {
	    public string versionName = "Current Data";

        public Account() : 
                base()
        {
            string clientId;
            var userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            var uri = ConfigurationManager.AppSettings.Get("ProfiseeURI");

            if (ServiceSecurityContext.Current != null && !string.IsNullOrEmpty(ServiceSecurityContext.Current.WindowsIdentity.Name) && ServiceSecurityContext.Current.WindowsIdentity.Name.ToLowerInvariant() != userName.ToLowerInvariant())
            {
                userName = ServiceSecurityContext.Current.WindowsIdentity.Name;
            }

            try
            {
                clientId = ConfigurationManager.AppSettings.Get("ServiceAccountClientId");
            }
            catch (ConfigurationErrorsException ex)
            {
                // Handle exceptions when clientId isn't defined.
                clientId = string.Empty;
            }
            base.ConnectToMasterDataServer(uri, clientId, userName);
        }
    }
}